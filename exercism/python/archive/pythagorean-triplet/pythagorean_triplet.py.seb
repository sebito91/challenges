""" Module to handle pythagorean triplet checks """
# -*- coding: utf-8 -*-

from __future__ import unicode_literals

def return_triplet(a, b, c):
    """ helper function to return the calculated triplet """
    if a > c:
        return tuple(sorted([a**2 - c**2, b, a**2 + c**2]))
    return tuple(sorted([c**2 - a**2, b, c**2 + a**2]))

def primitive_triplets(item, is_list=False):
    """ function to find all primitive pythagorean triplets having item
    as one of their components """
    if item % 4 != 0:
        raise ValueError("number not divisible by 4: {}".format(item))

    mn = item / 2
    lister = sorted(reduce(list.__add__, \
            ([return_triplet(x, item, mn/x)] for x in range(1, int(mn**0.5) + 1) \
            if mn % x == 0 and mn/x > x and (mn/x - x) % 2 != 0)))

    if is_list:
        return lister
    return set(lister)

def triplets_in_range(minval, maxval):
    """ function to return triplets """
    lister = sorted(reduce(list.__add__, \
            (primitive_triplets(item, True) for item in range(minval, maxval) if item % 4 == 0)))

    adds = [(each[0]*2, each[1]*2, each[2]*2) for each in lister \
            if each[0]*2 >= minval and each[2]*2 <= maxval]

    outs = [each for each in lister if each[0] >= minval and each[2] <= maxval]

    return set(outs + adds)

def is_triplet(item):
    """ function to confirm given value is a triplet """
    if len(item) != 3 or all([False for each in item if each % 4 != 0]):
        return False

    a, b, c = item
    if a > c and (b*b + c*c == a*a):
        return True

    print a, b, c
    if a < c and (a*a + b*b == c*c):
        return True

    return False
